
DROP TYPE IF EXISTS notification_type CASCADE;
DROP TABLE IF EXISTS notifications CASCADE;



CREATE TYPE notification type as ENUM('friend_request', 'friend_accept', 'message_from_chatwave');


CREATE TABLE notifications (
    id serial PRIMARY KEY,
    profile_id integer REFERENCES profiles(id) ON DELETE CASCADE,
    notification_type notification_type,
    notification_data jsonb,
    read boolean DEFAULT false,
    created_at timestamp with time zone DEFAULT now()
);



ALTER TABLE notifications ENABLE ROW LEVEL SECURITY;


CREATE POLICY notifications_insert_policy ON notifications
FOR insert with check(auth.uid() = profile_id);

CREATE POLICY notifications_select_policy ON notifications
FOR select using (auth.uid() = profile_id);

CREATE POLICY notifications_update_policy ON notifications
FOR update on notifications using (auth.uid() = profile_id);



CREATE OR REPLACE FUNCTION fn_notify_friend_request()
RETURNS trigger AS $$
DECLARE
    friend_username text;

BEGIN
    SELECT username INTO friend_username FROM profiles WHERE id = NEW.friend_id;
    INSERT INTO notifications (profile_id, notification_type, notification_data)
    VALUES (NEW.profile_id, 'friend_request', jsonb_build_object(
        'profile_id', NEW.profile_id,
        'friend_id', NEW.friend_id,
        'friend_username', friend_username
    ));

    RETURN NEW;
END;

$$ LANGUAGE plpgsql;

CREATE TRIGGER tg_notify_friend_request
after insert on friends for each row
execute procedure fn_notify_friend_request();



CREATE OR REPLACE FUNCTION fn_notify_friend_accept()
RETURNS trigger AS $$
DECLARE
    friend_username text;
BEGIN
    SELECT INTO friend_username FROM profiles WHERE id = NEW.friend_id;
    INSERT INTO notifications (profile_id, notification_type, notification_data)
    VALUES (NEW.friend_id_id, 'friend_accept', jsonb_build_object(
        'profile_id', NEW.profile_id,
        'friend_id', NEW.friend_id,
        'friend_username', friend_username
    ));
    RETURN NEW;
END;

$$ LANGUAGE plpgsql;

CREATE TRIGGER tg_notify_friend_accept
after update on friends for each row
when (NEW.status = 'accepted')
execute procedure fn_notify_friend_accept();



DECLARE
    friend_username text;
    friend_avatar text;
BEGIN
    SELECT avatar_url INTO friend_avatar FROM profiles WHERE id = NEW.friend_id;
    SELECT INTO friend_username FROM profiles WHERE id = NEW.friend_id;
    INSERT INTO notifications (profile_id, notification_type, notification_data)
    VALUES (NEW.profile_id, 'friend_accept', jsonb_build_object(
        'profile_id', NEW.profile_id,
        'friend_id', NEW.friend_id,
        'friend_username', friend_username,
        'friend_avatar', friend_avatar
    ));
    RETURN NEW;
END;
