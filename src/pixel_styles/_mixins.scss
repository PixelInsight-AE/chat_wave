// ! Mobile first
@mixin media-breakpoint-up($breakpoint) {
  @if $breakpoint == xs {
    @media (min-width: $breakpoint-xs) {
      @content;
    }
  } @else if $breakpoint == sm {
    @media (min-width: $breakpoint-sm) {
      @content;
    }
  } @else if $breakpoint == md {
    @media (min-width: $breakpoint-md) {
      @content;
    }
  } @else if $breakpoint == lg {
    @media (min-width: $breakpoint-lg) {
      @content;
    }
  } @else if $breakpoint == xl {
    @media (min-width: $breakpoint-xl) {
      @content;
    }
  } @else if $breakpoint == xxl {
    @media (min-width: $breakpoint-xxl) {
      @content;
    }
  } @else {
    @warn "Invalid breakpoint: #{$breakpoint}. Please use one of: xs, sm, md, lg, xl, xxl.";
  }
}

// ! Desktop first
@mixin media-breakpoint-down($breakpoint) {
  @if $breakpoint == sm {
    @media (max-width: calc($breakpoint-sm - 1px)) {
      @content;
    }
  } @else if $breakpoint == md {
    @media (max-width: calc($breakpoint-md - 1px)) {
      @content;
    }
  } @else if $breakpoint == lg {
    @media (max-width: calc($breakpoint-lg - 1px)) {
      @content;
    }
  } @else if $breakpoint == xl {
    @media (max-width: calc($breakpoint-xl - 1px)) {
      @content;
    }
  } @else if $breakpoint == xxl {
    @media (max-width: calc($breakpoint-xxl - 1px)) {
      @content;
    }
  } @else {
    @warn "Invalid breakpoint: #{$breakpoint}. Please use one of: sm, md, lg, xl, xxl.";
  }
}

// ? DISPLAY
@mixin flex($direction: row, $justify-content: flex-start, $align-items: flex-start, $align-content: stretch, $flex-wrap: nowrap) {
  display: flex;
  flex-direction: $direction;
  justify-content: $justify-content;
  align-items: $align-items;
  align-content: $align-content;
  flex-wrap: $flex-wrap;
}

@mixin flex-item($flex-grow: 0, $flex-shrink: 1, $flex-basis: auto) {
  flex-grow: $flex-grow;
  flex-shrink: $flex-shrink;
  flex-basis: $flex-basis;
}

// ! GRID
@mixin grid($grid-template-columns: 1fr, $grid-template-rows: 1fr, $grid-gap: 0.75rem, $justify-items: stretch, $align-items: stretch, $justify-content: start, $align-content: start) {
  display: grid;
  grid-template-columns: $grid-template-columns;
  grid-template-rows: $grid-template-rows;
  grid-gap: $grid-gap;
  justify-items: $justify-items;
  align-items: $align-items;
  justify-content: $justify-content;
  align-content: $align-content;
}

// ! POSITIONING
@mixin position($type: absolute, $top: 0, $right: 0, $bottom: 0, $left: 0) {
  position: $type;
  top: $top;
  right: $right;
  bottom: $bottom;
  left: $left;
}

@mixin position-top-left($top: 0, $left: 0) {
  position: absolute;
  top: $top;
  left: $left;
}

@mixin position-top-right($top: 0, $right: 0) {
  position: absolute;
  top: $top;
  right: $right;
}

@mixin sticky-top($top: 0) {
  position: sticky;
  top: $top;
}

@mixin size($width: auto, $height: auto) {
  width: $width;
  height: $height;
}

@mixin border($color: $color-border, $width: 1px, $style: solid, $radius: 0) {
  border: $width $style $color;
  border-radius: $radius;
}
@mixin border-x($color: $color-border, $width: 1px, $style: solid, $radius: 0) {
  border-left: $width $style $color;
  border-right: $width $style $color;
  border-radius: $radius;
}
@mixin border-y($color: $color-border, $width: 1px, $style: solid, $radius: 0) {
  border-top: $width $style $color;
  border-bottom: $width $style $color;
  border-radius: $radius;
}

@mixin margin-x($margin: $base-margin) {
  margin-left: $margin;
  margin-right: $margin;
}
@mixin margin-y($margin: $base-margin) {
  margin-top: $margin;
  margin-bottom: $margin;
}
@mixin padding-x($padding: $base-padding) {
  padding-left: $padding;
  padding-right: $padding;
}
@mixin padding-y($padding: $base-padding) {
  padding-top: $padding;
  padding-bottom: $padding;
}

@mixin padding-and-margin($padding: $base-padding, $margin: $base-margin) {
  padding: $padding;
  margin: $margin;
}
@mixin margin-and-padding($margin: $base-margin, $padding: $base-padding) {
  padding: $padding;
  margin: $margin;
}

@mixin button($bg-color: $color-secondary, $text-color: $c-text, $border-width: 0, $border-color: $bg-color, $border-radius: 0.25rem, $font-size: 1rem, $padding: 0.5rem 1rem, $margin: 0.5rem, $cursor: pointer) {
  padding: $padding;
  margin: $margin;
  border: $border-width solid $border-color;
  border-radius: $border-radius;
  background-color: $bg-color;
  color: $text-color;
  cursor: $cursor;
  transition: all 0.2s ease-in-out;

  &:hover,
  &:focus {
    transform: scale(1.05);
    background-color: darken($bg-color, 10%);
  }

  &:active {
    transform: scale(0.95);
  }
}
